// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment  @db.String annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Poet {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    content     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    likes       Like[]

    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model Like {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    poetId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    poet Poet @relation(fields: [poetId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([poetId])
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("verifiedAt")
    image         String?
    createdAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]

    // Non Next Auth
    poets         Poet[]
    likes         Like[]
    followedBy    User[]   @relation("Followers", fields: [followedByIDs], references: [id])
    followedByIDs String[] @db.ObjectId
    following     User[]   @relation("Followers", fields: [followingIDs], references: [id])
    followingIDs  String[] @db.ObjectId
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
